// Code generated by MockGen. DO NOT EDIT.
// Source: internal/encoder/url_storager.go

// Package mock_encoder is a generated GoMock package.
package mock_encoder

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockURLStorager is a mock of URLStorager interface.
type MockURLStorager struct {
	ctrl     *gomock.Controller
	recorder *MockURLStoragerMockRecorder
}

// MockURLStoragerMockRecorder is the mock recorder for MockURLStorager.
type MockURLStoragerMockRecorder struct {
	mock *MockURLStorager
}

// NewMockURLStorager creates a new mock instance.
func NewMockURLStorager(ctrl *gomock.Controller) *MockURLStorager {
	mock := &MockURLStorager{ctrl: ctrl}
	mock.recorder = &MockURLStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorager) EXPECT() *MockURLStoragerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockURLStorager) Get(short string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLStoragerMockRecorder) Get(short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLStorager)(nil).Get), short)
}

// IsKeyExist mocks base method.
func (m *MockURLStorager) IsKeyExist(short string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeyExist", short)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKeyExist indicates an expected call of IsKeyExist.
func (mr *MockURLStoragerMockRecorder) IsKeyExist(short interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeyExist", reflect.TypeOf((*MockURLStorager)(nil).IsKeyExist), short)
}

// Store mocks base method.
func (m *MockURLStorager) Store(short, long string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", short, long)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockURLStoragerMockRecorder) Store(short, long interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockURLStorager)(nil).Store), short, long)
}
